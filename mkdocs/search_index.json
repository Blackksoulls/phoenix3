{
    "docs": [
        {
            "location": "/", 
            "text": "Bienvenue !\n\n\nBienvenue sur la documentation de l\napplication mobile de Phoenix3.\n\n\nLiens utiles:\n\n- \nLicense\n\n- \nNotes de version\n\n- \nCredit\n\n\nPour me contacter:\n\n- \nTwitter\n\n- \n\n\nPhoenix3 Project\n\n\nLe \nPhoenix3 project\n est le projet d\nun distributeur auto-g\u00e9r\u00e9 avec une interface graphique tactile pour commander, un serveur de centralisation des donn\u00e9es et une application de maintenance.\n\n\nApplication mobile\n\n\nL\napplication mobile est d\u00e9velopp\u00e9e \u00e0 l\naide du framework \nIonic 2\n (XHTML, \nTypescript\n, \nSASS\n), l\nAPI \u00e0 l\naide du \nPHP\n et la base de donn\u00e9e est en MySQL.", 
            "title": "Acceuil"
        }, 
        {
            "location": "/#bienvenue", 
            "text": "Bienvenue sur la documentation de l application mobile de Phoenix3.  Liens utiles: \n-  License \n-  Notes de version \n-  Credit  Pour me contacter: \n-  Twitter \n-", 
            "title": "Bienvenue !"
        }, 
        {
            "location": "/#phoenix3-project", 
            "text": "Le  Phoenix3 project  est le projet d un distributeur auto-g\u00e9r\u00e9 avec une interface graphique tactile pour commander, un serveur de centralisation des donn\u00e9es et une application de maintenance.", 
            "title": "Phoenix3 Project"
        }, 
        {
            "location": "/#application-mobile", 
            "text": "L application mobile est d\u00e9velopp\u00e9e \u00e0 l aide du framework  Ionic 2  (XHTML,  Typescript ,  SASS ), l API \u00e0 l aide du  PHP  et la base de donn\u00e9e est en MySQL.", 
            "title": "Application mobile"
        }, 
        {
            "location": "/API/add/", 
            "text": "Code source\n\n\nLien du raw sur \ngithub\n \n(Pour le telecharger voir dans la partie \nSupport\n de la doc)\n\n\nExplication du fonctionnement\n\n\nLe code est en php, pour vous remettre dedans ou pour d\u00e9buter rapidement (si vous avez d\u00e9j\u00e0 des bases en programmation) \nPHP in Ymin\n\n\n(\nLes lignes de code surlign\u00e9es sont \u00e0 ne pas oublier\n)\n\n\nHeader\n\n\n1\n2\n3\n4\nerror_reporting\n(\n0\n);\n\n\nheader\n(\nContent-Type: application/json; charset=UTF-8\n);\n\n\nheader\n(\nAccess-Control-Allow-Origin: *\n);\n\n\nheader\n(\nAccess-Control-Allow-Methods: GET, POST\n);\n\n\n\n\n\n\n\n\n\nerror_reporting\n(\n0\n);\n D\u00e9fini le niveau d\nerreur automatiques \u00e0 0, donc aucune erreur n\nest retourn\u00e9e par php.\n\n\nheader\n(\nAccess-Control-Allow-Origin: *\n);\n  D\u00e9fini l\nacc\u00e8s au fichier par une url. Ici, autorise tout le monde \u00e0 y acc\u00e9der. \nPas super s\u00e9curis\u00e9, je sais\n \n.\n\n\nheader\n(\nAccess-Control-Allow-Methods: GET, POST\n);\n Accepte les requetes \nPOST\n et les requetes \nGET\n.\n\n\n\n\nD\u00e9coupage de la requete\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n$postdata\n \n=\n \nfile_get_contents\n(\nphp://input\n);\n\n\n$request\n \n=\n \njson_decode\n(\n$postdata\n);\n\n\n$bdd_host\n \n=\n \n$request\n-\nhost\n \n?:\n \nlocalhost\n;\n\n\n$bdd_db\n \n=\n \n$request\n-\ndbdb\n \n?:\n \nphoenix3\n;\n\n\n$bdd_user\n \n=\n \n$request\n-\nusername\n \n?:\n \nroot\n;\n\n\n$bdd_password\n \n=\n \n$request\n-\npassword\n \n?:\n \n;\n\n\n$table\n \n=\n \n$request\n-\ntable\n \n?:\n \nitem_database\n;\n\n\n$textcontent\n \n=\n \n$request\n-\ntextcontent\n;\n\n\n$price\n \n=\n \n$request\n-\nprice\n;\n\n\n$nb\n \n=\n \n$request\n-\nnb\n;\n\n\n$pic\n \n=\n \n$request\n-\npic\n;\n\n\n$datevalue\n \n=\n \n$request\n-\ndatevalue\n;\n\n\n\n\n\n\n\n\n\n$postdata\n \nfile_get_contents\n(\nphp://input\n);\n R\u00e9cup\u00e8re le contenu brut de la requete.\n\n\n$request\n \n=\n \njson_decode\n(\n$postdata\n);\n Traduit le contenu de la requete pour pouvoir le traiter dans le code (requete encod\u00e9e en \nJSON\n)\n\n\nEnsuite les variables sont toutes traduites de la meme fa\u00e7on: \n$nouvelleVarPhp\n \n=\n \n$request\n-\ninfoAretrouver\n \n?:\n \nvaleurParDefaut\n\n\n\n\nTest de la connection\n\n\n1\n2\n$con\n \n=\n \nmysql_connect\n(\n$bdd_host\n,\n$bdd_user\n,\n$bdd_password\n)\n \nor\n \ndie\n \n(\nFailed to connect to MySQL: \n \n.\n \nmysql_error\n());\n\n\nmysql_select_db\n(\n$bdd_db\n,\n \n$con\n);\n\n\n\n\n\n\n\n\n\n$con\n \n=\n \nmysql_connect\n(\n$bdd_host\n,\n$bdd_user\n,\n$bdd_password\n)\n Tente de se connecter \u00e0 la BDD \u00e0 l\naide de l\nurl et des identifiants.\n\n\nor\n \ndie\n \n(\nFailed to connect to MySQL: \n \n.\n \nmysql_error\n());\n Si l\nAPI n\narrive pas \u00e0 s\ny connecter s\narrete l\u00e0 et renvoie un message d\nerreur et l\nerreur MySQL.\n\n\nmysql_select_db\n(\n$bdd_db\n,\n \n$con\n)\n Selectionne la BDD dans MySQL. (Chez nous la BDD phoenix3).\n\n\n\n\nPr\u00e9paration de la requete\n\n\n1\n2\n3\n$qry_em\n \n=\n \nSELECT count(*) as cnt from \n \n.\n \n$table\n \n.\n \n where textcontent=\n \n.\n \n$textcontent\n \n.\n \n;\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry_em\n);\n\n\n$res\n \n=\n \nmysql_fetch_assoc\n(\n$qry_res\n);\n\n\n\n\n\n\n\n\n\n$qry_em\n \n=\n \nSELECT count(*) as  cnt from \n \n.\n \n$table\n \n.\n \n where textcontent=\n \n.\n \n$textcontent\n \n.\n \n;\n Construit une requete SQL qui selectionne tout le contenu de la table o\u00f9 le nom est \u00e9gal au nom de notre objet ajout\u00e9.\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry_em\n);\n Execute la requete SQL dans la BDD et stocke me contenu dans une variable.\n\n\n$res\n \n=\n \nmysql_fetch_assoc\n(\n$qry_res\n);\n Transforme cette variable inutilisable telle qu\nelle en un tableau associatif.\n\n\n\n\nExecution de notre requete d\najout dans la BDD\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nif\n(\n$res\n[\ncnt\n]\n==\n0\n){\n\n    \n$qry\n \n=\n \nINSERT INTO \n \n.\n \n$table\n \n.\n (textcontent,price,nb,datevalue,pic) VALUES (\n \n.\n \n$textcontent\n \n.\n \n,\n \n.\n \n$price\n \n.\n \n,\n \n.\n \n$nb\n \n.\n \n,\n \n.\n \n$datevalue\n \n.\n \n,\n \n.\n \n$pic\n \n.\n \n)\n;\n\n    \n$qry_res\n \n=\n \nmysql_query\n(\n$qry\n);\n\n        \nif\n \n(\n$qry_res\n)\n \n{\n\n            \necho\n \n1\n;\n\n        \n}\n \nelse\n \n{\n\n            \necho\n \n2\n;\n\n        \n}\n\n    \n}\n\n\nelse\n\n\n{\n\n    \necho\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nif\n(\n$res\n[\ncnt\n]\n==\n0\n){\n Teste si l\nobjet n\nexiste pas d\u00e9j\u00e0 dans la BDD. Si il est superieur \u00e0 0 renvoie un code d\nerreur \n0\n.\n\n\n$qry\n \n=\n \nINSERT INTO \n \n.\n \n$table\n \n.\n (textcontent,price,nb,datevalue,pic) VALUES (\n \n.\n \n$textcontent\n \n.\n \n,\n \n.\n \n$price\n \n.\n \n,\n \n.\n \n$nb\n \n.\n \n,\n \n.\n \n$datevalue\n \n.\n \n,\n \n.\n \n$pic\n \n.\n \n)\n;\n Construit la requete SQL pour ajouter l\nobjet dans la BDD.\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry\n);\n Execute la requete SQL et recupere le retour dans une variable.\n\n\nif\n(\n$qry_res\n)\n \n{\n Si il y a un retour MySQL, envoie un code de reussite \n1\n, sinon renvoie \n2", 
            "title": "Ajouter"
        }, 
        {
            "location": "/API/add/#code-source", 
            "text": "Lien du raw sur  github   (Pour le telecharger voir dans la partie  Support  de la doc)", 
            "title": "Code source"
        }, 
        {
            "location": "/API/add/#explication-du-fonctionnement", 
            "text": "Le code est en php, pour vous remettre dedans ou pour d\u00e9buter rapidement (si vous avez d\u00e9j\u00e0 des bases en programmation)  PHP in Ymin  ( Les lignes de code surlign\u00e9es sont \u00e0 ne pas oublier )", 
            "title": "Explication du fonctionnement"
        }, 
        {
            "location": "/API/add/#header", 
            "text": "1\n2\n3\n4 error_reporting ( 0 );  header ( Content-Type: application/json; charset=UTF-8 );  header ( Access-Control-Allow-Origin: * );  header ( Access-Control-Allow-Methods: GET, POST );     error_reporting ( 0 );  D\u00e9fini le niveau d erreur automatiques \u00e0 0, donc aucune erreur n est retourn\u00e9e par php.  header ( Access-Control-Allow-Origin: * );   D\u00e9fini l acc\u00e8s au fichier par une url. Ici, autorise tout le monde \u00e0 y acc\u00e9der.  Pas super s\u00e9curis\u00e9, je sais   .  header ( Access-Control-Allow-Methods: GET, POST );  Accepte les requetes  POST  et les requetes  GET .", 
            "title": "Header"
        }, 
        {
            "location": "/API/add/#decoupage-de-la-requete", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 $postdata   =   file_get_contents ( php://input );  $request   =   json_decode ( $postdata );  $bdd_host   =   $request - host   ?:   localhost ;  $bdd_db   =   $request - dbdb   ?:   phoenix3 ;  $bdd_user   =   $request - username   ?:   root ;  $bdd_password   =   $request - password   ?:   ;  $table   =   $request - table   ?:   item_database ;  $textcontent   =   $request - textcontent ;  $price   =   $request - price ;  $nb   =   $request - nb ;  $pic   =   $request - pic ;  $datevalue   =   $request - datevalue ;     $postdata   file_get_contents ( php://input );  R\u00e9cup\u00e8re le contenu brut de la requete.  $request   =   json_decode ( $postdata );  Traduit le contenu de la requete pour pouvoir le traiter dans le code (requete encod\u00e9e en  JSON )  Ensuite les variables sont toutes traduites de la meme fa\u00e7on:  $nouvelleVarPhp   =   $request - infoAretrouver   ?:   valeurParDefaut", 
            "title": "D\u00e9coupage de la requete"
        }, 
        {
            "location": "/API/add/#test-de-la-connection", 
            "text": "1\n2 $con   =   mysql_connect ( $bdd_host , $bdd_user , $bdd_password )   or   die   ( Failed to connect to MySQL:    .   mysql_error ());  mysql_select_db ( $bdd_db ,   $con );     $con   =   mysql_connect ( $bdd_host , $bdd_user , $bdd_password )  Tente de se connecter \u00e0 la BDD \u00e0 l aide de l url et des identifiants.  or   die   ( Failed to connect to MySQL:    .   mysql_error ());  Si l API n arrive pas \u00e0 s y connecter s arrete l\u00e0 et renvoie un message d erreur et l erreur MySQL.  mysql_select_db ( $bdd_db ,   $con )  Selectionne la BDD dans MySQL. (Chez nous la BDD phoenix3).", 
            "title": "Test de la connection"
        }, 
        {
            "location": "/API/add/#preparation-de-la-requete", 
            "text": "1\n2\n3 $qry_em   =   SELECT count(*) as cnt from    .   $table   .    where textcontent=   .   $textcontent   .   ;  $qry_res   =   mysql_query ( $qry_em );  $res   =   mysql_fetch_assoc ( $qry_res );     $qry_em   =   SELECT count(*) as  cnt from    .   $table   .    where textcontent=   .   $textcontent   .   ;  Construit une requete SQL qui selectionne tout le contenu de la table o\u00f9 le nom est \u00e9gal au nom de notre objet ajout\u00e9.  $qry_res   =   mysql_query ( $qry_em );  Execute la requete SQL dans la BDD et stocke me contenu dans une variable.  $res   =   mysql_fetch_assoc ( $qry_res );  Transforme cette variable inutilisable telle qu elle en un tableau associatif.", 
            "title": "Pr\u00e9paration de la requete"
        }, 
        {
            "location": "/API/add/#execution-de-notre-requete-dajout-dans-la-bdd", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 if ( $res [ cnt ] == 0 ){ \n     $qry   =   INSERT INTO    .   $table   .  (textcontent,price,nb,datevalue,pic) VALUES (   .   $textcontent   .   ,   .   $price   .   ,   .   $nb   .   ,   .   $datevalue   .   ,   .   $pic   .   ) ; \n     $qry_res   =   mysql_query ( $qry ); \n         if   ( $qry_res )   { \n             echo   1 ; \n         }   else   { \n             echo   2 ; \n         } \n     }  else  { \n     echo   0 ;  }     if ( $res [ cnt ] == 0 ){  Teste si l objet n existe pas d\u00e9j\u00e0 dans la BDD. Si il est superieur \u00e0 0 renvoie un code d erreur  0 .  $qry   =   INSERT INTO    .   $table   .  (textcontent,price,nb,datevalue,pic) VALUES (   .   $textcontent   .   ,   .   $price   .   ,   .   $nb   .   ,   .   $datevalue   .   ,   .   $pic   .   ) ;  Construit la requete SQL pour ajouter l objet dans la BDD.  $qry_res   =   mysql_query ( $qry );  Execute la requete SQL et recupere le retour dans une variable.  if ( $qry_res )   {  Si il y a un retour MySQL, envoie un code de reussite  1 , sinon renvoie  2", 
            "title": "Execution de notre requete d'ajout dans la BDD"
        }, 
        {
            "location": "/API/edit/", 
            "text": "Code source\n\n\nLien du raw sur \ngithub\n \n(Pour le telecharger voir dans la partie \nSupport\n de la doc)\n\n\nExplication du fonctionnement\n\n\nLe code est en php, pour vous remettre dedans ou pour d\u00e9buter rapidement (si vous avez d\u00e9j\u00e0 des bases en programmation) \nPHP in Ymin\n\n\n(\nLes lignes de code surlign\u00e9es sont \u00e0 ne pas oublier\n)\n\n\nHeader\n\n\n1\n2\n3\n4\nerror_reporting\n(\n0\n);\n\n\nheader\n(\nContent-Type: application/json; charset=UTF-8\n);\n\n\nheader\n(\nAccess-Control-Allow-Origin: *\n);\n\n\nheader\n(\nAccess-Control-Allow-Methods: GET, POST\n);\n\n\n\n\n\n\n\n\n\nerror_reporting\n(\n0\n);\n D\u00e9fini le niveau d\nerreur automatiques \u00e0 0, donc aucune erreur n\nest retourn\u00e9e par php.\n\n\nheader\n(\nAccess-Control-Allow-Origin: *\n);\n  D\u00e9fini l\nacc\u00e8s au fichier par une url. Ici, autorise tout le monde \u00e0 y acc\u00e9der. \nPas super s\u00e9curis\u00e9, je sais\n \n.\n\n\nheader\n(\nAccess-Control-Allow-Methods: GET, POST\n);\n Accepte les requetes \nPOST\n et les requetes \nGET\n.\n\n\n\n\nD\u00e9coupage de la requete\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n$postdata\n \n=\n \nfile_get_contents\n(\nphp://input\n);\n\n\n$request\n \n=\n \njson_decode\n(\n$postdata\n);\n\n\n$bdd_host\n \n=\n \n$request\n-\nhost\n \n?:\n \nlocalhost\n;\n\n\n$bdd_db\n \n=\n \n$request\n-\ndbdb\n \n?:\n \nphoenix3\n;\n\n\n$bdd_user\n \n=\n \n$request\n-\nusername\n \n?:\n \nroot\n;\n\n\n$bdd_password\n \n=\n \n$request\n-\npassword\n \n?:\n \n;\n\n\n$table\n \n=\n \n$request\n-\ntable\n \n?:\n \nitem_database\n;\n\n\n$textcontent\n \n=\n \n$request\n-\ntextcontent\n;\n\n\n$price\n \n=\n \n$request\n-\nprice\n;\n\n\n$nb\n \n=\n \n$request\n-\nnb\n;\n\n\n$pic\n \n=\n \n$request\n-\npic\n;\n\n\n$datevalue\n \n=\n \n$request\n-\ndatevalue\n;\n\n\n$oldname\n \n=\n \n$request\n-\noldname\n;\n\n\n\n\n\n\n\n\n\n$postdata\n \nfile_get_contents\n(\nphp://input\n);\n R\u00e9cup\u00e8re le contenu brut de la requete.\n\n\n$request\n \n=\n \njson_decode\n(\n$postdata\n);\n Traduit le contenu de la requete pour pouvoir le traiter dans le code (requete encod\u00e9e en \nJSON\n)\n\n\nEnsuite les variables sont toutes traduites de la meme fa\u00e7on: \n$nouvelleVarPhp\n \n=\n \n$request\n-\ninfoAretrouver\n \n?:\n \nvaleurParDefaut\n\n\n\n\nTest de la connection\n\n\n1\n2\n$con\n \n=\n \nmysql_connect\n(\n$bdd_host\n,\n$bdd_user\n,\n$bdd_password\n)\n \nor\n \ndie\n \n(\nFailed to connect to MySQL: \n \n.\n \nmysql_error\n());\n\n\nmysql_select_db\n(\n$bdd_db\n,\n \n$con\n);\n\n\n\n\n\n\n\n\n\n$con\n \n=\n \nmysql_connect\n(\n$bdd_host\n,\n$bdd_user\n,\n$bdd_password\n)\n Tente de se connecter \u00e0 la BDD \u00e0 l\naide de l\nurl et des identifiants.\n\n\nor\n \ndie\n \n(\nFailed to connect to MySQL: \n \n.\n \nmysql_error\n());\n Si l\nAPI n\narrive pas \u00e0 s\ny connecter s\narrete l\u00e0 et renvoie un message d\nerreur et l\nerreur MySQL.\n\n\nmysql_select_db\n(\n$bdd_db\n,\n \n$con\n)\n Selectionne la BDD dans MySQL. (Chez nous la BDD phoenix3).\n\n\n\n\nPr\u00e9paration de la requete\n\n\n1\n2\n3\n$qry_em\n \n=\n \nSELECT count(*) as cnt from \n \n.\n \n$table\n \n.\n \n WHERE textcontent=\n \n.\n \n$oldname\n \n.\n \n;\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry_em\n);\n\n\n$res\n \n=\n \nmysql_fetch_assoc\n(\n$qry_res\n)\n\n\n\n\n\n\n\n\n\n$qry_em\n \n=\n \nSELECT count(*) as  cnt from \n \n.\n \n$table\n \n.\n \n where textcontent=\n \n.\n \n$oldname\n \n.\n \n;\n Construit une requete SQL qui selectionne tout le contenu de la table o\u00f9 le nom est \u00e9gal \u00e0 l\nancien nom de l\nobjet \u00e9dit\u00e9.\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry_em\n);\n Execute la requete SQL dans la BDD et stocke me contenu dans une variable.\n\n\n$res\n \n=\n \nmysql_fetch_assoc\n(\n$qry_res\n);\n Transforme cette variable inutilisable telle qu\nelle en un tableau associatif.\n\n\n\n\nExecution de notre requete d\najout dans la BDD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nif\n(\n$res\n[\ncnt\n]\n==\n1\n){\n\n\n$qry\n \n=\n \nUPDATE item_database SET textcontent=\n.\n \n$textcontent\n \n.\n,price=\n.\n \n$price\n \n.\n,nb=\n.\n \n$nb\n \n.\n, datevalue=\n.\n \n$datevalue\n \n.\n, pic=\n.\n \n$pic\n \n.\n WHERE textcontent=\n.\n \n$oldname\n \n.\n;\n;\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry\n);\n\n    \nif\n \n(\n$qry_res\n)\n \n{\n\n        \necho\n \n1\n;\n\n    \n}\n \nelse\n \n{\n\n        \necho\n \n2\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nif\n(\n$res\n[\ncnt\n]\n==\n1\n){\n Teste si l\nobjet existe dans la BDD.\n\n\n$qry\n \n=\n \nUPDATE item_database SET textcontent=\n.\n \n$textcontent\n \n.\n,price=\n.\n \n$price\n \n.\n,nb=\n.\n \n$nb\n \n.\n, datevalue=\n.\n \n$datevalue\n \n.\n, pic=\n.\n \n$pic\n \n.\n WHERE textcontent=\n.\n \n$oldname\n \n.\n;\n;\n Construit la requete SQL pour \u00e9diter l\nobjet dans la BDD.\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry\n);\n Execute la requete SQL et recupere le retour dans une variable.\n\n\nif\n(\n$qry_res\n)\n \n{\n Si il y a un retour MySQL, envoie un code de reussite \n1\n, sinon renvoie \n2", 
            "title": "Editer"
        }, 
        {
            "location": "/API/edit/#code-source", 
            "text": "Lien du raw sur  github   (Pour le telecharger voir dans la partie  Support  de la doc)", 
            "title": "Code source"
        }, 
        {
            "location": "/API/edit/#explication-du-fonctionnement", 
            "text": "Le code est en php, pour vous remettre dedans ou pour d\u00e9buter rapidement (si vous avez d\u00e9j\u00e0 des bases en programmation)  PHP in Ymin  ( Les lignes de code surlign\u00e9es sont \u00e0 ne pas oublier )", 
            "title": "Explication du fonctionnement"
        }, 
        {
            "location": "/API/edit/#header", 
            "text": "1\n2\n3\n4 error_reporting ( 0 );  header ( Content-Type: application/json; charset=UTF-8 );  header ( Access-Control-Allow-Origin: * );  header ( Access-Control-Allow-Methods: GET, POST );     error_reporting ( 0 );  D\u00e9fini le niveau d erreur automatiques \u00e0 0, donc aucune erreur n est retourn\u00e9e par php.  header ( Access-Control-Allow-Origin: * );   D\u00e9fini l acc\u00e8s au fichier par une url. Ici, autorise tout le monde \u00e0 y acc\u00e9der.  Pas super s\u00e9curis\u00e9, je sais   .  header ( Access-Control-Allow-Methods: GET, POST );  Accepte les requetes  POST  et les requetes  GET .", 
            "title": "Header"
        }, 
        {
            "location": "/API/edit/#decoupage-de-la-requete", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 $postdata   =   file_get_contents ( php://input );  $request   =   json_decode ( $postdata );  $bdd_host   =   $request - host   ?:   localhost ;  $bdd_db   =   $request - dbdb   ?:   phoenix3 ;  $bdd_user   =   $request - username   ?:   root ;  $bdd_password   =   $request - password   ?:   ;  $table   =   $request - table   ?:   item_database ;  $textcontent   =   $request - textcontent ;  $price   =   $request - price ;  $nb   =   $request - nb ;  $pic   =   $request - pic ;  $datevalue   =   $request - datevalue ;  $oldname   =   $request - oldname ;     $postdata   file_get_contents ( php://input );  R\u00e9cup\u00e8re le contenu brut de la requete.  $request   =   json_decode ( $postdata );  Traduit le contenu de la requete pour pouvoir le traiter dans le code (requete encod\u00e9e en  JSON )  Ensuite les variables sont toutes traduites de la meme fa\u00e7on:  $nouvelleVarPhp   =   $request - infoAretrouver   ?:   valeurParDefaut", 
            "title": "D\u00e9coupage de la requete"
        }, 
        {
            "location": "/API/edit/#test-de-la-connection", 
            "text": "1\n2 $con   =   mysql_connect ( $bdd_host , $bdd_user , $bdd_password )   or   die   ( Failed to connect to MySQL:    .   mysql_error ());  mysql_select_db ( $bdd_db ,   $con );     $con   =   mysql_connect ( $bdd_host , $bdd_user , $bdd_password )  Tente de se connecter \u00e0 la BDD \u00e0 l aide de l url et des identifiants.  or   die   ( Failed to connect to MySQL:    .   mysql_error ());  Si l API n arrive pas \u00e0 s y connecter s arrete l\u00e0 et renvoie un message d erreur et l erreur MySQL.  mysql_select_db ( $bdd_db ,   $con )  Selectionne la BDD dans MySQL. (Chez nous la BDD phoenix3).", 
            "title": "Test de la connection"
        }, 
        {
            "location": "/API/edit/#preparation-de-la-requete", 
            "text": "1\n2\n3 $qry_em   =   SELECT count(*) as cnt from    .   $table   .    WHERE textcontent=   .   $oldname   .   ;  $qry_res   =   mysql_query ( $qry_em );  $res   =   mysql_fetch_assoc ( $qry_res )     $qry_em   =   SELECT count(*) as  cnt from    .   $table   .    where textcontent=   .   $oldname   .   ;  Construit une requete SQL qui selectionne tout le contenu de la table o\u00f9 le nom est \u00e9gal \u00e0 l ancien nom de l objet \u00e9dit\u00e9.  $qry_res   =   mysql_query ( $qry_em );  Execute la requete SQL dans la BDD et stocke me contenu dans une variable.  $res   =   mysql_fetch_assoc ( $qry_res );  Transforme cette variable inutilisable telle qu elle en un tableau associatif.", 
            "title": "Pr\u00e9paration de la requete"
        }, 
        {
            "location": "/API/edit/#execution-de-notre-requete-dajout-dans-la-bdd", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 if ( $res [ cnt ] == 1 ){  $qry   =   UPDATE item_database SET textcontent= .   $textcontent   . ,price= .   $price   . ,nb= .   $nb   . , datevalue= .   $datevalue   . , pic= .   $pic   .  WHERE textcontent= .   $oldname   . ; ;  $qry_res   =   mysql_query ( $qry ); \n     if   ( $qry_res )   { \n         echo   1 ; \n     }   else   { \n         echo   2 ; \n     }  }     if ( $res [ cnt ] == 1 ){  Teste si l objet existe dans la BDD.  $qry   =   UPDATE item_database SET textcontent= .   $textcontent   . ,price= .   $price   . ,nb= .   $nb   . , datevalue= .   $datevalue   . , pic= .   $pic   .  WHERE textcontent= .   $oldname   . ; ;  Construit la requete SQL pour \u00e9diter l objet dans la BDD.  $qry_res   =   mysql_query ( $qry );  Execute la requete SQL et recupere le retour dans une variable.  if ( $qry_res )   {  Si il y a un retour MySQL, envoie un code de reussite  1 , sinon renvoie  2", 
            "title": "Execution de notre requete d'ajout dans la BDD"
        }, 
        {
            "location": "/API/show/", 
            "text": "Code source\n\n\nLien du raw sur \ngithub\n \n(Pour le telecharger voir dans la partie \nSupport\n de la doc)\n\n\nExplication du fonctionnement\n\n\nLe code est en php, pour vous remettre dedans ou pour d\u00e9buter rapidement (si vous avez d\u00e9j\u00e0 des bases en programmation) \nPHP in Ymin\n\n\n(\nLes lignes de code surlign\u00e9es sont \u00e0 ne pas oublier\n)\n\n\nHeader\n\n\n1\n2\n3\n4\nerror_reporting\n(\n0\n);\n\n\nheader\n(\nContent-Type: application/json; charset=UTF-8\n);\n\n\nheader\n(\nAccess-Control-Allow-Origin: *\n);\n\n\nheader\n(\nAccess-Control-Allow-Methods: GET, POST\n);\n\n\n\n\n\n\n\n\n\nerror_reporting\n(\n0\n);\n D\u00e9fini le niveau d\nerreur automatiques \u00e0 0, donc aucune erreur n\nest retourn\u00e9e par php.\n\n\nheader\n(\nAccess-Control-Allow-Origin: *\n);\n  D\u00e9fini l\nacc\u00e8s au fichier par une url. Ici, autorise tout le monde \u00e0 y acc\u00e9der. \nPas super s\u00e9curis\u00e9, je sais\n \n.\n\n\nheader\n(\nAccess-Control-Allow-Methods: GET, POST\n);\n Accepte les requetes \nPOST\n et les requetes \nGET\n.\n\n\n\n\nD\u00e9coupage de la requete\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n$postdata\n \n=\n \nfile_get_contents\n(\nphp://input\n);\n\n\n$request\n \n=\n \njson_decode\n(\n$postdata\n);\n\n\n$bdd_host\n \n=\n \n$request\n-\nhost\n \n?:\n \nlocalhost\n;\n\n\n$bdd_db\n \n=\n \n$request\n-\ndbdb\n \n?:\n \nphoenix3\n;\n\n\n$bdd_user\n \n=\n \n$request\n-\nusername\n \n?:\n \nroot\n;\n\n\n$bdd_password\n \n=\n \n$request\n-\npassword\n \n?:\n \n;\n\n\n$table\n \n=\n \n$request\n-\ntable\n \n?:\n \nitem_database\n;\n\n\n$show\n \n=\n \n$request\n-\nshow\n \n?:\n \nall\n;\n\n\n\n\n\n\n\n\n\n$postdata\n \nfile_get_contents\n(\nphp://input\n);\n R\u00e9cup\u00e8re le contenu brut de la requete.\n\n\n$request\n \n=\n \njson_decode\n(\n$postdata\n);\n Traduit le contenu de la requete pour pouvoir le traiter dans le code (requete encod\u00e9e en \nJSON\n)\n\n\nEnsuite les variables sont toutes traduites de la meme fa\u00e7on: \n$nouvelleVarPhp\n \n=\n \n$request\n-\ninfoAretrouver\n \n?:\n \nvaleurParDefaut\n\n\n\n\nTest de la connection\n\n\n1\n2\n$con\n \n=\n \nmysql_connect\n(\n$bdd_host\n,\n$bdd_user\n,\n$bdd_password\n)\n \nor\n \ndie\n \n(\nerror\n);\n\n\nmysql_select_db\n(\n$bdd_db\n,\n \n$con\n);\n\n\n\n\n\n\n\n\n\n$con\n \n=\n \nmysql_connect\n(\n$bdd_host\n,\n$bdd_user\n,\n$bdd_password\n)\n Tente de se connecter \u00e0 la BDD \u00e0 l\naide de l\nurl et des identifiants.\n\n\nor\n \ndie\n \n(\nerror\n);\n Si l\nAPI n\narrive pas \u00e0 s\ny connecter s\narrete l\u00e0 et renvoie le code \nerror\n.\n\n\nmysql_select_db\n(\n$bdd_db\n,\n \n$con\n)\n Selectionne la BDD dans MySQL. (Chez nous la BDD phoenix3).\n\n\n\n\nExecution de notre requete d\najout dans la BDD\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nif\n \n(\n$show\n \n==\n \nall\n)\n \n{\n\n\n$qry_res\n \n=\n \nmysql_query\n(\nSELECT * FROM \n \n.\n \n$table\n);\n\n\nif\n \n(\n!\n$qry_res\n)\n \n{\n\n    \ndie\n(\nerror\n);\n\n\n}\n\n\n$rows\n \n=\n \narray\n();\n\n\nwhile\n \n(\n$r\n \n=\n \nmysql_fetch_assoc\n(\n$qry_res\n))\n \n{\n\n    \n$rows\n[]\n \n=\n \n$r\n;\n\n\n}\n\n\necho\n \njson_encode\n(\n$rows\n);\n\n\n};\n\n\n\n\n\n\n\n\n\n$qry_res\n \n=\n \nmysql_query\n(\nSELECT * FROM \n \n.\n \n$table\n);\n Construit, execute la requete SQL pour afficher la table de la BDD.\n\n\nif\n \n(\n!\n$qry_res\n)\n \n{\n Si il n\ny a pas de r\u00e9ponse, arreter le programme et retourner le code \nerror\n\n\nwhile\n \n(\n$r\n \n=\n \nmysql_fetch_assoc\n(\n$qry_res\n))\n \n{\n$rows\n[]\n \n=\n \n$r\n;}\n Stocker la table r\u00e9cup\u00e9r\u00e9e dans un tableau.\n\n\necho\n \njson_encode\n(\n$rows\n);\n Encoder le tableau en JSON et le renvoyer en retour.", 
            "title": "Afficher"
        }, 
        {
            "location": "/API/show/#code-source", 
            "text": "Lien du raw sur  github   (Pour le telecharger voir dans la partie  Support  de la doc)", 
            "title": "Code source"
        }, 
        {
            "location": "/API/show/#explication-du-fonctionnement", 
            "text": "Le code est en php, pour vous remettre dedans ou pour d\u00e9buter rapidement (si vous avez d\u00e9j\u00e0 des bases en programmation)  PHP in Ymin  ( Les lignes de code surlign\u00e9es sont \u00e0 ne pas oublier )", 
            "title": "Explication du fonctionnement"
        }, 
        {
            "location": "/API/show/#header", 
            "text": "1\n2\n3\n4 error_reporting ( 0 );  header ( Content-Type: application/json; charset=UTF-8 );  header ( Access-Control-Allow-Origin: * );  header ( Access-Control-Allow-Methods: GET, POST );     error_reporting ( 0 );  D\u00e9fini le niveau d erreur automatiques \u00e0 0, donc aucune erreur n est retourn\u00e9e par php.  header ( Access-Control-Allow-Origin: * );   D\u00e9fini l acc\u00e8s au fichier par une url. Ici, autorise tout le monde \u00e0 y acc\u00e9der.  Pas super s\u00e9curis\u00e9, je sais   .  header ( Access-Control-Allow-Methods: GET, POST );  Accepte les requetes  POST  et les requetes  GET .", 
            "title": "Header"
        }, 
        {
            "location": "/API/show/#decoupage-de-la-requete", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 $postdata   =   file_get_contents ( php://input );  $request   =   json_decode ( $postdata );  $bdd_host   =   $request - host   ?:   localhost ;  $bdd_db   =   $request - dbdb   ?:   phoenix3 ;  $bdd_user   =   $request - username   ?:   root ;  $bdd_password   =   $request - password   ?:   ;  $table   =   $request - table   ?:   item_database ;  $show   =   $request - show   ?:   all ;     $postdata   file_get_contents ( php://input );  R\u00e9cup\u00e8re le contenu brut de la requete.  $request   =   json_decode ( $postdata );  Traduit le contenu de la requete pour pouvoir le traiter dans le code (requete encod\u00e9e en  JSON )  Ensuite les variables sont toutes traduites de la meme fa\u00e7on:  $nouvelleVarPhp   =   $request - infoAretrouver   ?:   valeurParDefaut", 
            "title": "D\u00e9coupage de la requete"
        }, 
        {
            "location": "/API/show/#test-de-la-connection", 
            "text": "1\n2 $con   =   mysql_connect ( $bdd_host , $bdd_user , $bdd_password )   or   die   ( error );  mysql_select_db ( $bdd_db ,   $con );     $con   =   mysql_connect ( $bdd_host , $bdd_user , $bdd_password )  Tente de se connecter \u00e0 la BDD \u00e0 l aide de l url et des identifiants.  or   die   ( error );  Si l API n arrive pas \u00e0 s y connecter s arrete l\u00e0 et renvoie le code  error .  mysql_select_db ( $bdd_db ,   $con )  Selectionne la BDD dans MySQL. (Chez nous la BDD phoenix3).", 
            "title": "Test de la connection"
        }, 
        {
            "location": "/API/show/#execution-de-notre-requete-dajout-dans-la-bdd", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 if   ( $show   ==   all )   {  $qry_res   =   mysql_query ( SELECT * FROM    .   $table );  if   ( ! $qry_res )   { \n     die ( error );  }  $rows   =   array ();  while   ( $r   =   mysql_fetch_assoc ( $qry_res ))   { \n     $rows []   =   $r ;  }  echo   json_encode ( $rows );  };     $qry_res   =   mysql_query ( SELECT * FROM    .   $table );  Construit, execute la requete SQL pour afficher la table de la BDD.  if   ( ! $qry_res )   {  Si il n y a pas de r\u00e9ponse, arreter le programme et retourner le code  error  while   ( $r   =   mysql_fetch_assoc ( $qry_res ))   { $rows []   =   $r ;}  Stocker la table r\u00e9cup\u00e9r\u00e9e dans un tableau.  echo   json_encode ( $rows );  Encoder le tableau en JSON et le renvoyer en retour.", 
            "title": "Execution de notre requete d'ajout dans la BDD"
        }, 
        {
            "location": "/API/delete/", 
            "text": "Code source\n\n\nLien du raw sur \ngithub\n \n(Pour le telecharger voir dans la partie \nSupport\n de la doc)\n\n\nExplication du fonctionnement\n\n\nLe code est en php, pour vous remettre dedans ou pour d\u00e9buter rapidement (si vous avez d\u00e9j\u00e0 des bases en programmation) \nPHP in Ymin\n\n\n(\nLes lignes de code surlign\u00e9es sont \u00e0 ne pas oublier\n)\n\n\nHeader\n\n\n1\n2\n3\n4\nerror_reporting\n(\n0\n);\n\n\nheader\n(\nContent-Type: application/json; charset=UTF-8\n);\n\n\nheader\n(\nAccess-Control-Allow-Origin: *\n);\n\n\nheader\n(\nAccess-Control-Allow-Methods: GET, POST\n);\n\n\n\n\n\n\n\n\n\nerror_reporting\n(\n0\n);\n D\u00e9fini le niveau d\nerreur automatiques \u00e0 0, donc aucune erreur n\nest retourn\u00e9e par php.\n\n\nheader\n(\nAccess-Control-Allow-Origin: *\n);\n  D\u00e9fini l\nacc\u00e8s au fichier par une url. Ici, autorise tout le monde \u00e0 y acc\u00e9der. \nPas super s\u00e9curis\u00e9, je sais\n \n.\n\n\nheader\n(\nAccess-Control-Allow-Methods: GET, POST\n);\n Accepte les requetes \nPOST\n et les requetes \nGET\n.\n\n\n\n\nD\u00e9coupage de la requete\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n$postdata\n \n=\n \nfile_get_contents\n(\nphp://input\n);\n\n\n$request\n \n=\n \njson_decode\n(\n$postdata\n);\n\n\n$bdd_host\n \n=\n \n$request\n-\nhost\n \n?:\n \nlocalhost\n;\n\n\n$bdd_db\n \n=\n \n$request\n-\ndbdb\n \n?:\n \nphoenix3\n;\n\n\n$bdd_user\n \n=\n \n$request\n-\nusername\n \n?:\n \nroot\n;\n\n\n$bdd_password\n \n=\n \n$request\n-\npassword\n \n?:\n \n;\n\n\n$table\n \n=\n \n$request\n-\ntable\n \n?:\n \nitem_database\n;\n\n\n$item_name\n \n=\n \n$request\n-\nitem_name\n;\n\n\n\n\n\n\n\n\n\n$postdata\n \nfile_get_contents\n(\nphp://input\n);\n R\u00e9cup\u00e8re le contenu brut de la requete.\n\n\n$request\n \n=\n \njson_decode\n(\n$postdata\n);\n Traduit le contenu de la requete pour pouvoir le traiter dans le code (requete encod\u00e9e en \nJSON\n)\n\n\nEnsuite les variables sont toutes traduites de la meme fa\u00e7on: \n$nouvelleVarPhp\n \n=\n \n$request\n-\ninfoAretrouver\n \n?:\n \nvaleurParDefaut\n\n\n\n\nTest de la connection\n\n\n1\n2\n$con\n \n=\n \nmysql_connect\n(\n$bdd_host\n,\n$bdd_user\n,\n$bdd_password\n)\n \nor\n \ndie\n \n(\nFailed to connect to MySQL: \n \n.\n \nmysql_error\n());\n\n\nmysql_select_db\n(\n$bdd_db\n,\n \n$con\n);\n\n\n\n\n\n\n\n\n\n$con\n \n=\n \nmysql_connect\n(\n$bdd_host\n,\n$bdd_user\n,\n$bdd_password\n)\n Tente de se connecter \u00e0 la BDD \u00e0 l\naide de l\nurl et des identifiants.\n\n\nor\n \ndie\n \n(\nFailed to connect to MySQL: \n \n.\n \nmysql_error\n());\n Si l\nAPI n\narrive pas \u00e0 s\ny connecter s\narrete l\u00e0 et renvoie un message d\nerreur et l\nerreur MySQL.\n\n\nmysql_select_db\n(\n$bdd_db\n,\n \n$con\n)\n Selectionne la BDD dans MySQL. (Chez nous la BDD phoenix3).\n\n\n\n\nPr\u00e9paration de la requete\n\n\n1\n2\n3\n$qry_em\n \n=\n \nSELECT count(*) as cnt from \n \n.\n \n$table\n \n.\n \n where textcontent=\n \n.\n \n$item_name\n \n.\n \n;\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry_em\n);\n\n\n$res\n \n=\n \nmysql_fetch_assoc\n(\n$qry_res\n);\n\n\n\n\n\n\n\n\n\n$qry_em\n \n=\n \nSELECT count(*) as  cnt from \n \n.\n \n$table\n \n.\n \n where textcontent=\n \n.\n \n$item_name\n \n.\n \n;\n Construit une requete SQL qui selectionne tout le contenu de la table o\u00f9 le nom est \u00e9gal au nom de notre objet supprim\u00e9.\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry_em\n);\n Execute la requete SQL dans la BDD et stocke me contenu dans une variable.\n\n\n$res\n \n=\n \nmysql_fetch_assoc\n(\n$qry_res\n);\n Transforme cette variable inutilisable telle qu\nelle en un tableau associatif.\n\n\n\n\nExecution de notre requete d\najout dans la BDD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nif\n(\n$res\n[\ncnt\n]\n==\n1\n){\n\n\n$qry\n \n=\n \nDELETE FROM \n \n.\n \n$bdd_db\n \n.\n \n.\n \n.\n \n$table\n \n.\n \n WHERE \n \n.\n \n$table\n \n.\n \n.\n \n.\n \ntextcontent=\n \n.\n \n$item_name\n \n.\n \n;\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry\n);\n\n    \nif\n \n(\n$qry_res\n)\n \n{\n\n        \necho\n \n1\n;\n\n    \n}\n \nelse\n \n{\n\n        \necho\n \n2\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nif\n(\n$res\n[\ncnt\n]\n==\n1\n){\n Teste si l\nobjet existe dans la BDD.\n\n\n$qry\n \n=\n \nINSERT INTO \n \n.\n \n$table\n \n.\n (textcontent,price,nb,datevalue,pic) VALUES (\n \n.\n \n$textcontent\n \n.\n \n,\n \n.\n \n$price\n \n.\n \n,\n \n.\n \n$nb\n \n.\n \n,\n \n.\n \n$datevalue\n \n.\n \n,\n \n.\n \n$pic\n \n.\n \n)\n;\n Construit la requete SQL pour supprimer l\nobjet de la BDD.\n\n\n$qry_res\n \n=\n \nmysql_query\n(\n$qry\n);\n Execute la requete SQL et recupere le retour dans une variable.\n\n\nif\n(\n$qry_res\n)\n \n{\n Si il y a un retour MySQL, envoie un code de reussite \n1\n, sinon renvoie \n2", 
            "title": "Supprimer"
        }, 
        {
            "location": "/API/delete/#code-source", 
            "text": "Lien du raw sur  github   (Pour le telecharger voir dans la partie  Support  de la doc)", 
            "title": "Code source"
        }, 
        {
            "location": "/API/delete/#explication-du-fonctionnement", 
            "text": "Le code est en php, pour vous remettre dedans ou pour d\u00e9buter rapidement (si vous avez d\u00e9j\u00e0 des bases en programmation)  PHP in Ymin  ( Les lignes de code surlign\u00e9es sont \u00e0 ne pas oublier )", 
            "title": "Explication du fonctionnement"
        }, 
        {
            "location": "/API/delete/#header", 
            "text": "1\n2\n3\n4 error_reporting ( 0 );  header ( Content-Type: application/json; charset=UTF-8 );  header ( Access-Control-Allow-Origin: * );  header ( Access-Control-Allow-Methods: GET, POST );     error_reporting ( 0 );  D\u00e9fini le niveau d erreur automatiques \u00e0 0, donc aucune erreur n est retourn\u00e9e par php.  header ( Access-Control-Allow-Origin: * );   D\u00e9fini l acc\u00e8s au fichier par une url. Ici, autorise tout le monde \u00e0 y acc\u00e9der.  Pas super s\u00e9curis\u00e9, je sais   .  header ( Access-Control-Allow-Methods: GET, POST );  Accepte les requetes  POST  et les requetes  GET .", 
            "title": "Header"
        }, 
        {
            "location": "/API/delete/#decoupage-de-la-requete", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8 $postdata   =   file_get_contents ( php://input );  $request   =   json_decode ( $postdata );  $bdd_host   =   $request - host   ?:   localhost ;  $bdd_db   =   $request - dbdb   ?:   phoenix3 ;  $bdd_user   =   $request - username   ?:   root ;  $bdd_password   =   $request - password   ?:   ;  $table   =   $request - table   ?:   item_database ;  $item_name   =   $request - item_name ;     $postdata   file_get_contents ( php://input );  R\u00e9cup\u00e8re le contenu brut de la requete.  $request   =   json_decode ( $postdata );  Traduit le contenu de la requete pour pouvoir le traiter dans le code (requete encod\u00e9e en  JSON )  Ensuite les variables sont toutes traduites de la meme fa\u00e7on:  $nouvelleVarPhp   =   $request - infoAretrouver   ?:   valeurParDefaut", 
            "title": "D\u00e9coupage de la requete"
        }, 
        {
            "location": "/API/delete/#test-de-la-connection", 
            "text": "1\n2 $con   =   mysql_connect ( $bdd_host , $bdd_user , $bdd_password )   or   die   ( Failed to connect to MySQL:    .   mysql_error ());  mysql_select_db ( $bdd_db ,   $con );     $con   =   mysql_connect ( $bdd_host , $bdd_user , $bdd_password )  Tente de se connecter \u00e0 la BDD \u00e0 l aide de l url et des identifiants.  or   die   ( Failed to connect to MySQL:    .   mysql_error ());  Si l API n arrive pas \u00e0 s y connecter s arrete l\u00e0 et renvoie un message d erreur et l erreur MySQL.  mysql_select_db ( $bdd_db ,   $con )  Selectionne la BDD dans MySQL. (Chez nous la BDD phoenix3).", 
            "title": "Test de la connection"
        }, 
        {
            "location": "/API/delete/#preparation-de-la-requete", 
            "text": "1\n2\n3 $qry_em   =   SELECT count(*) as cnt from    .   $table   .    where textcontent=   .   $item_name   .   ;  $qry_res   =   mysql_query ( $qry_em );  $res   =   mysql_fetch_assoc ( $qry_res );     $qry_em   =   SELECT count(*) as  cnt from    .   $table   .    where textcontent=   .   $item_name   .   ;  Construit une requete SQL qui selectionne tout le contenu de la table o\u00f9 le nom est \u00e9gal au nom de notre objet supprim\u00e9.  $qry_res   =   mysql_query ( $qry_em );  Execute la requete SQL dans la BDD et stocke me contenu dans une variable.  $res   =   mysql_fetch_assoc ( $qry_res );  Transforme cette variable inutilisable telle qu elle en un tableau associatif.", 
            "title": "Pr\u00e9paration de la requete"
        }, 
        {
            "location": "/API/delete/#execution-de-notre-requete-dajout-dans-la-bdd", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 if ( $res [ cnt ] == 1 ){  $qry   =   DELETE FROM    .   $bdd_db   .   .   .   $table   .    WHERE    .   $table   .   .   .   textcontent=   .   $item_name   .   ;  $qry_res   =   mysql_query ( $qry ); \n     if   ( $qry_res )   { \n         echo   1 ; \n     }   else   { \n         echo   2 ; \n     }  }     if ( $res [ cnt ] == 1 ){  Teste si l objet existe dans la BDD.  $qry   =   INSERT INTO    .   $table   .  (textcontent,price,nb,datevalue,pic) VALUES (   .   $textcontent   .   ,   .   $price   .   ,   .   $nb   .   ,   .   $datevalue   .   ,   .   $pic   .   ) ;  Construit la requete SQL pour supprimer l objet de la BDD.  $qry_res   =   mysql_query ( $qry );  Execute la requete SQL et recupere le retour dans une variable.  if ( $qry_res )   {  Si il y a un retour MySQL, envoie un code de reussite  1 , sinon renvoie  2", 
            "title": "Execution de notre requete d'ajout dans la BDD"
        }, 
        {
            "location": "/APP/home/", 
            "text": "", 
            "title": "Acceuil"
        }, 
        {
            "location": "/APP/bdd/", 
            "text": "", 
            "title": "BDD"
        }, 
        {
            "location": "/APP/settings/", 
            "text": "", 
            "title": "Params"
        }, 
        {
            "location": "/APP/about/", 
            "text": "", 
            "title": "A propos"
        }, 
        {
            "location": "/APP/data/", 
            "text": "", 
            "title": "Data"
        }, 
        {
            "location": "/APP/trans/", 
            "text": "", 
            "title": "Trans"
        }, 
        {
            "location": "/license/", 
            "text": "MIT License\n\n\nCopyright \n 2017 Johan Planchon\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND,\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY \nCLAIM\n, \nDAMAGES\n OR \nOTHER LIABILITY\n, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#mit-license", 
            "text": "Copyright   2017 Johan Planchon  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND,  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  CLAIM ,  DAMAGES  OR  OTHER LIABILITY , WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "MIT License"
        }, 
        {
            "location": "/release/", 
            "text": "[04-05-2017]\n Cr\u00e9ation de la documentation.", 
            "title": "Notes dev."
        }, 
        {
            "location": "/credit/", 
            "text": "Atom\n for the IDE.\n\n\nIonic 2\n for the framework of the app.\n\n\nAndroid Studio\n for the compilation to Android.\n\n\nMkDocs\n for the documentation generator.\n\n\nMartin Donath\n for the material theme of MkDocs.\n\n\nIsaac Muse\n for the amazing \n extensions of MkDocs.\n\n\nLearn X in Y minutes\n I\nve just discovered it now and it\ns just awesome \n.", 
            "title": "Credit"
        }, 
        {
            "location": "/help/", 
            "text": "Ou ?\n\n\n\n\nSur la page \nbegin\n de Ionic.\n\n\nSur la \ndocumentation\n de Ionic 2.\n\n\nEn ouvrant une issue sur le \ngithub\n du projet.\n\n\nOu en me contactant par un des liens sur la page \nd\naccueil\n \n(je ne sais pas quand je pourrais r\u00e9pondre \n)\n\n\n\n\nPour t\u00e9l\u00e9charger le code depuis raw.github\n\n\n\n\nRight Button\n puis \nEnregistrer sous\n\n\nou \nCtrl\n+\nS\n\n\nou encore \nwget \nhttp://urldelapage\n\n\nou bien \ncurl -O \nhttp://urldelapage\n\n\n\n\nConseils pour la pr\u00e9paration du Project\n\n\n1.\n Installez nodejs et npm\n\n\n\n\nPar exemple pour linux: \napt install nodejs-legacy\n\n\nPour windows et mac t\u00e9l\u00e9chargez \nl\ninstalleur\n\n\n\n\n2.\n Installez cordova (ouvrer un invit\u00e9 de commande, pour windows \nWin\n+\nR\n puis tapez \ncmd\n et \nEnter\n) ensuite dans l\ninvite de commande, \nnpm install cordova -g\n\n\n3.\n Ensuite au tour de Ionic (toujours dans l\ninvite de commande) \nnpm install ionic -g\n\n\n4.\n Allez \u00e0 l\nendroit ou vous avez t\u00e9l\u00e9charg\u00e9 mon code source, puis dans le dossier \nphoenix3/src_code_v2/phoenix\n\n\n\n\nPour rappel pour le t\u00e9l\u00e9charger: \ngit clone https://github.com/blackksoulls/phoenix3.git\n (Et pour passer au code de l\nAPI, un simple petit \ngit checkout api\n dans le d\u00e9pot t\u00e9l\u00e9charg\u00e9, \nremplacez api par master pour repasser sur la branche principale\n)\n\n\nOu alors vous t\u00e9l\u00e9chargez l\narchive \ndirectement\n. (Pour l\nAPI ce sera \nici\n)\n\n\n\n\n5.\n Faites un \nnpm install\n pour installer les d\u00e9pendances.\n\n\n6.\n Et enfin \nionic serve --lab\n\n\n7.\n Vous pouvez maintenant aller voir l\napplication dans votre \nnavigateur\n.\n\n\nCompiler l\napplication pour Android\n\n\nPartie pr\u00e9vue mais non termin\u00e9e", 
            "title": "Support"
        }, 
        {
            "location": "/help/#ou", 
            "text": "Sur la page  begin  de Ionic.  Sur la  documentation  de Ionic 2.  En ouvrant une issue sur le  github  du projet.  Ou en me contactant par un des liens sur la page  d accueil   (je ne sais pas quand je pourrais r\u00e9pondre  )", 
            "title": "Ou ?"
        }, 
        {
            "location": "/help/#pour-telecharger-le-code-depuis-rawgithub", 
            "text": "Right Button  puis  Enregistrer sous  ou  Ctrl + S  ou encore  wget  http://urldelapage  ou bien  curl -O  http://urldelapage", 
            "title": "Pour t\u00e9l\u00e9charger le code depuis raw.github"
        }, 
        {
            "location": "/help/#conseils-pour-la-preparation-du-project", 
            "text": "1.  Installez nodejs et npm   Par exemple pour linux:  apt install nodejs-legacy  Pour windows et mac t\u00e9l\u00e9chargez  l installeur   2.  Installez cordova (ouvrer un invit\u00e9 de commande, pour windows  Win + R  puis tapez  cmd  et  Enter ) ensuite dans l invite de commande,  npm install cordova -g  3.  Ensuite au tour de Ionic (toujours dans l invite de commande)  npm install ionic -g  4.  Allez \u00e0 l endroit ou vous avez t\u00e9l\u00e9charg\u00e9 mon code source, puis dans le dossier  phoenix3/src_code_v2/phoenix   Pour rappel pour le t\u00e9l\u00e9charger:  git clone https://github.com/blackksoulls/phoenix3.git  (Et pour passer au code de l API, un simple petit  git checkout api  dans le d\u00e9pot t\u00e9l\u00e9charg\u00e9,  remplacez api par master pour repasser sur la branche principale )  Ou alors vous t\u00e9l\u00e9chargez l archive  directement . (Pour l API ce sera  ici )   5.  Faites un  npm install  pour installer les d\u00e9pendances.  6.  Et enfin  ionic serve --lab  7.  Vous pouvez maintenant aller voir l application dans votre  navigateur .", 
            "title": "Conseils pour la pr\u00e9paration du Project"
        }, 
        {
            "location": "/help/#compiler-lapplication-pour-android", 
            "text": "Partie pr\u00e9vue mais non termin\u00e9e", 
            "title": "Compiler l'application pour Android"
        }
    ]
}